{"name":"Laravel Rewardable","tagline":"","body":"# Laravel Rewardable\r\n\r\n## Installation\r\n\r\nFirst, pull in the package through Composer.\r\n\r\n```bash\r\n$ composer require draperstudio/laravel-rewardable:^1.0\r\n```\r\n\r\nAnd then include the service provider within `app/config/app.php`.\r\n\r\n```php\r\n'providers' => [\r\n    DraperStudio\\Rewardable\\ServiceProvider::class\r\n];\r\n```\r\n\r\nAt last you need to publish and run the migration.\r\n\r\n```\r\nphp artisan vendor:publish --provider=\"DraperStudio\\Rewardable\\ServiceProvider\" && php artisan migrate\r\n```\r\n\r\n## Setup a Model\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App;\r\n\r\n// use DraperStudio\\Rewardable\\Traits\\Badgeable as BadgeableTrait;\r\n// use DraperStudio\\Rewardable\\Traits\\Creditable as CreditableTrait;\r\n// use DraperStudio\\Rewardable\\Traits\\Rankable as RankableTrait;\r\n// use DraperStudio\\Rewardable\\Traits\\Transactionable as TransactionableTrait;\r\nuse DraperStudio\\Rewardable\\Traits\\Rewardable as RewardableTrait;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass User extends Model\r\n{\r\n    use RewardableTrait;\r\n\r\n    // these can be required one-by-one if you don't need all and don't use RewardableTrait\r\n    // use BadgeableTrait;\r\n    // use CreditableTrait;\r\n    // use RankableTrait;\r\n    // use TransactionableTrait;\r\n}\r\n```\r\n\r\n## Classes and Methods\r\n\r\n## Credits\r\n\r\n### Get all Credits of a user\r\n```php\r\n$user->credits();\r\n```\r\n\r\n### Get all Credits of a user\r\n```php\r\n$user->getCredit();\r\n```\r\n\r\n### Get all Credits of a user by Credit type\r\n```php\r\n$user->getCreditByType($type);\r\n```\r\n\r\n### Get the current balance of a user\r\n```php\r\n$user->getBalance();\r\n```\r\n\r\n### Get the current balance of a user by Credit type\r\n```php\r\n$user->getBalanceByType($type);\r\n```\r\n\r\n### Get all Credits a user has spent\r\n```php\r\n$user->getSpendCredits();\r\n```\r\n\r\n### Grant a single Credit\r\n```php\r\n$user->grantCredit(Credit::find($id));\r\n```\r\n\r\n### Grant multiple Credits\r\n```php\r\n$user->grantCredits([\r\n    Credit::find($id), Credit::find($id), Credit::find($id)\r\n]);\r\n```\r\n\r\n### Revoke a single Credit\r\n```php\r\n$user->revokeCredit(Credit::find($id));\r\n```\r\n\r\n### Revoke multiple Credits\r\n```php\r\n$user->revokeCredits([\r\n    Credit::find($id), Credit::find($id), Credit::find($id)\r\n]);\r\n```\r\n\r\n### Revoke all credits\r\n```php\r\n$user->revokeAllCredits();\r\n```\r\n\r\n### Regrant all Credits **(Removes all credits and assigns the new ones)**\r\n```php\r\n$user->reGrantCredits([\r\n    Credit::find($id), Credit::find($id), Credit::find($id)\r\n]);\r\n```\r\n\r\n### Create a new Credit Type\r\n```php\r\nCreditType::create(['name' => 'Participation']);\r\n```\r\n\r\n## Badges\r\n\r\n### Get all Badges of a user\r\n```php\r\n$user->badges();\r\n```\r\n\r\n### Grant a single Badge\r\n```php\r\n$user->grantBadge(Badge::find($id));\r\n```\r\n\r\n### Grand multiple Badges\r\n```php\r\n$user->grantBadges([\r\n    Badge::find($id), Badge::find($id), Badge::find($id)\r\n]);\r\n```\r\n\r\n### Revoke a single badge\r\n```php\r\n$user->revokeBadge(Badge::find($id));\r\n```\r\n\r\n### Revoke multiple Badges\r\n```php\r\n$user->revokeBadges([\r\n    Badge::find($id), Badge::find($id), Badge::find($id)\r\n]);\r\n```\r\n\r\n### Revoke all Badges\r\n```php\r\n$user->revokeAllBadges();\r\n```\r\n\r\n### Regrant all Badges **(Removes all badges and assigns the new ones)**\r\n```php\r\n$user->reGrantBadges([\r\n    Badge::find($id), Badge::find($id), Badge::find($id)\r\n]);\r\n```\r\n\r\n## Ranks\r\n\r\n### Get all Ranks of a user\r\n```php\r\n$user->ranks();\r\n```\r\n\r\n### Grant a single Rank\r\n```php\r\n$user->grantRank(Rank::find($id));\r\n```\r\n\r\n### Grant multiple Ranks\r\n```php\r\n$user->grantRanks([\r\n    Rank::find($id), Rank::find($id), Rank::find($id)\r\n]);\r\n```\r\n\r\n### Revoke a single Rank\r\n```php\r\n$user->revokeRank(Rank::find($id));\r\n```\r\n\r\n### Revoke multiple ranks\r\n```php\r\n$user->revokeRanks([\r\n    Rank::find($id), Rank::find($id), Rank::find($id)\r\n]);\r\n```\r\n\r\n### Revoke all Ranks\r\n```php\r\n$user->revokeAllRanks();\r\n```\r\n\r\n### Regrant all Ranks **(Removes all ranks and assigns the new ones)**\r\n```php\r\n$user->reGrantRanks([\r\n    Rank::find($id), Rank::find($id), Rank::find($id)\r\n]);\r\n```\r\n\r\n## Transactions\r\n\r\n### Get all Transactions of a user\r\n```php\r\n$user->transactions();\r\n```\r\n\r\n### Charge a user the given amount of points\r\n```php\r\n$user->chargeCredits(Credit::find($id)->amount, CreditType::find($id)->id);\r\n```\r\n\r\n## To-Do\r\n- Revoke Credits when Badges/Ranks with a Reward are revoked\r\n- Allow Entites to go in Debt","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}